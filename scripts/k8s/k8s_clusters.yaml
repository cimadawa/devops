environments:
  test:                                 # Create as many enviroments as you need Dev, Test, UAT, Production
    config:
      s3_bucket: kops-state             # Kops state bucket name
      aws_account: "11111111111"        # Used to confirm you are connected to the right AWS account before doing anything
      dns_zone_id: 1111111111111        # Zone id to create rr's in
      vpc_id: vpc-1111111               # Existing VPC, code currently assumes it has a CIDR of 10.0.0.0/16
    clusters:
      ##################### Cluster A #####################
      k8s-a.example.com:                # This is the cluster name passed to kops, define as many clusters as you want (i.e. k8s-b.example.com)
          ami_id: ami-66884c06          # Use the standard Debian k8s image or maybe a custom image built with packer
          route_fix:                    # This section is used to swap the route in the route table that kops creates
            igw: igw-1111111            # Existing IGW that kops will specify for the default route
            ngw: nat-1111111            # Existing NAT gateway that will replace the IGW
          master_policy: kops-master-policy-prod.1.4.j2.json   # These two policies get applied to ASGs and running nodes
          node_policy: kops-node-policy-prod.1.4.j2.json
          subnets:
            non_masq_subnet: 10.128.0.0/14
            zones:                      # Zones and subnets cluster will use
              us-west-2a: 10.0.200.0/24
              us-west-2b: 10.0.201.0/24
              us-west-2c: 10.0.202.0/24
            unmanaged_public_subnets:   # These get labeled after create and unlabeled before delete, needed for Internet ELBs
              - subnet-1111111          # They must have a close.io/unmanaged_k8s_cluster tag set to the cluster name
              - subnet-1111111
              - subnet-1111111
          master:
            type: m3.medium
            zones:
              - us-west-2a
              - us-west-2b
              - us-west-2c
            labels:
              aws:
                AwsType: k8s
                AwsRole: master
              k8s:
                close.io/ig: master
          instance_groups:               # Instance groups to create, should be able to create as many as you want here
            nodes:                       # This is the default ig created by kops, cloned to create other IGs specified here
              number: 1
              type: m3.medium
              labels:
                aws:
                  AwsType: k8s
                  Role: node
                k8s:
                  close.io/ig: utility
              zones:                     # This is cutting the zone list back from what is passed into kops for the default IG
                - us-west-2a
              security_groups:           # These security groups will get assigned to this instance group
                - sg-11111111
                - sg-11111111
            services:                    # Example 2nd IG created during cluster creation
              number: 1
              type: m3.medium
              labels:
                aws:
                  AwsType: k8s
                  AwsRole: node
                k8s:
                  close.io/ig: services
              zones:
                - us-west-2a
                - us-west-2b
                - us-west-2c
              security_groups:
                - sg-11111111
          version: 1.4.1
          ssh_key: ~/.ssh/aws_test.pub
          secrets:                      # These are your own secrets that will be copied from an existing S3 bucket
            user1:                      # to the kops state bucket
              bucket: my-k8s-tokens
              key: token1
            user1:
              bucket: my-k8s-tokens
              key: token2
